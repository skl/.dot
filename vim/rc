" vim: ft=vim fdm=marker ts=4 sts=4 sw=4 fdl=0

" startup/global general settings {{{
set nocompatible
set modeline
set modelines=5
set shortmess +=I
set noswapfile
set ttyfast
set showcmd
set history=1000
set clipboard=unnamed
set switchbuf=useopen
set hidden
set visualbell t_vb=
set novisualbell
set nu
set ruler
set foldcolumn=2
set foldmethod=marker
set tags=tags;/
set showfulltag
"}}}

" neobundle {{{
set rtp+=~/.vim/bundle/neobundle.vim
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
"}}}

" keyboard/mouse general settings {{{
set mouse=a
set backspace=indent,eol,start
set listchars=tab:▸\ ,eol:¬
if has('mouse_sgr')
    set ttymouse=sgr
endif
"}}}

" indentation and syntax highlighting {{{
filetype plugin indent on
syntax on
set hlsearch
set ai
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set shiftwidth=4
set textwidth=0
set wrapmargin=0
set encoding=utf-8
set cursorline
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
set colorcolumn=120
set cursorcolumn
autocmd BufWinLeave * setlocal nocursorcolumn
autocmd BufWinEnter * setlocal cursorcolumn

NeoBundle 'scrooloose/syntastic'
let g:syntastic_error_symbol = '✗'
let g:syntastic_style_error_symbol = '✠'
let g:syntastic_warning_symbol = '∆'
let g:syntastic_style_warning_symbol = '≈'
"}}}

" functions {{{
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! s:get_cache_dir(suffix) "{{{
    return resolve(expand('~/.vim/.cache/' . a:suffix))
endfunction "}}}
"}}}

" filetype specifics {{{
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

"autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

" map file extensions to type
autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

autocmd BufWritePre *.py,*.js,*.php,*.html,*.htm :call <SID>StripTrailingWhitespaces()
"}}}

NeoBundleLazy 'scrooloose/nerdtree', {'autoload':{'commands':['NERDTreeToggle','NERDTreeFind']}} "{{{
    let NERDTreeShowHidden=1
    let NERDTreeQuitOnOpen=0
    let NERDTreeShowLineNumbers=1
    let NERDTreeChDirMode=0
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.git','\.hg']
    let NERDTreeBookmarksFile='~/.vim/.cache/NERDTreeBookmarks'
"}}}

" colourscheme {{{
NeoBundle 'nanotech/jellybeans.vim'
colorscheme jellybeans
"}}}

" plugins {{{
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'vim-scripts/taglist.vim'
NeoBundleLazy 'godlygeek/tabular', {'autoload':{'commands':'Tabularize'}}

NeoBundleLazy 'Shougo/neocomplete.vim', {'autoload':{'insert':1}, 'vim_version':'7.4'}
    let g:neocomplete#enable_at_startup=1
    let g:neocomplete#data_directory=s:get_cache_dir('neocomplete')
    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

NeoBundle 'kien/ctrlp.vim', { 'depends': 'tacahiroy/ctrlp-funky' }
    let g:ctrlp_clear_cache_on_exit=1
    let g:ctrlp_max_height=40
    let g:ctrlp_show_hidden=0
    let g:ctrlp_follow_symlinks=1
    let g:ctrlp_max_files=20000
    let g:ctrlp_cache_dir=s:get_cache_dir('ctrlp')
    "let g:ctrlp_reuse_window='startify'
    let g:ctrlp_extensions=['funky']
    let g:ctrlp_custom_ignore = {
        \ 'dir': '\v[\/]\.(git|hg|svn|idea)$',
        \ 'file': '\v\.DS_Store$'
        \ }

    if executable('ag')
        let g:ctrlp_user_command='ag %s -l --nocolor -g ""'
    endif
"}}}

" keymaps {{{
nmap <leader>l :set list!<CR>   " toggle whitespace identifiers
nmap <leader><leader> za        " toggle fold open/close
nmap <leader>- zM               " close all folds
nmap <leader>= zR               " open all folds

nmap , [ctrlp]
nnoremap [ctrlp] <nop>
nnoremap [ctrlp]t :CtrlPBufTag<cr>
nnoremap [ctrlp]T :CtrlPTag<cr>
nnoremap [ctrlp]l :CtrlPLine<cr>
nnoremap [ctrlp]o :CtrlPFunky<cr>
nnoremap [ctrlp]b :CtrlPBuffer<cr>

nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

nnoremap <leader>' :NERDTreeToggle<CR>
nnoremap <leader>; :NERDTreeFind<CR>
nnoremap <F5> :call <SID>StripTrailingWhitespaces()<CR>

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv
"}}}

NeoBundleCheck
