" vim: ft=vim fdm=marker ts=4 sts=4 sw=4 fdl=1

" startup/global general settings {{{
set nocompatible
set modeline
set modelines=5
set shortmess +=I
set noswapfile
set ttyfast
set showcmd
set history=1000
set clipboard=unnamed
set switchbuf=useopen
set hidden
set visualbell t_vb=
set novisualbell
set nu
set ruler
set foldenable
set foldmethod=syntax
set foldlevelstart=99
set tags=tags;/
set showfulltag
set statusline=%<%f\                     " Filename
set statusline+=%w%h%m%r                 " Options
set statusline+=%{fugitive#statusline()} " Git Hotness
set statusline+=\ [%{&ff}/%Y]            " Filetype
set statusline+=\ [%{getcwd()}]          " Current dir
set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
set splitright
set splitbelow
"}}}

" neobundle {{{
set rtp+=~/.vim/bundle/neobundle.vim
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
"}}}

" keyboard/mouse general settings {{{
set mouse=a
set backspace=indent,eol,start
set listchars=tab:▸\ ,eol:¬
if has('mouse_sgr')
    set ttymouse=sgr
endif
"}}}

" indentation and syntax highlighting {{{
filetype plugin indent on
syntax on
set incsearch
set hlsearch
set ignorecase
set ai
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set shiftwidth=4
set textwidth=0
set wrapmargin=0
set encoding=utf-8
set cursorline
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
set colorcolumn=120
set cursorcolumn
autocmd BufWinLeave * setlocal nocursorcolumn
autocmd BufWinEnter * setlocal cursorcolumn

NeoBundle 'scrooloose/syntastic'
let g:syntastic_error_symbol = '✗'
let g:syntastic_style_error_symbol = '✠'
let g:syntastic_warning_symbol = '∆'
let g:syntastic_style_warning_symbol = '≈'
" }}}

" functions {{{
function! s:get_cache_dir(suffix)
    return resolve(expand('~/.vim/.cache/' . a:suffix))
endfunction
" }}}

" filetype specifics {{{
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType js,scss,css autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}
autocmd FileType python setlocal foldmethod=indent
autocmd FileType markdown setlocal nolist
autocmd FileType vim setlocal fdm=indent keywordprg=:help
" }}}

NeoBundleLazy 'scrooloose/nerdtree', {'autoload':{'commands':['NERDTreeToggle','NERDTreeFind']}} "{{{
    let NERDTreeShowHidden=1
    let NERDTreeQuitOnOpen=0
    let NERDTreeShowLineNumbers=1
    let NERDTreeChDirMode=0
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.git','\.hg']
    let NERDTreeBookmarksFile='~/.vim/.cache/NERDTreeBookmarks'
" }}}

" colourscheme {{{
NeoBundle 'nanotech/jellybeans.vim'
colorscheme jellybeans
" }}}

" plugins {{{
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'vim-scripts/taglist.vim'
NeoBundle 'vim-scripts/phpmanual'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'spf13/PIV'
    let g:DisableAutoPHPFolding = 1
    let g:PIVAutoClose = 0

NeoBundle 'mhinz/vim-signify'
    let g:signify_vcs_list = [ 'git' ]
    let g:signify_update_on_bufenter=0

NeoBundle 'justinmk/vim-sneak'
    let g:sneak#s_next=1

NeoBundle 'gregsexton/gitv', {'depends':['tpope/vim-fugitive']}
NeoBundleLazy 'godlygeek/tabular', {'autoload':{'commands':'Tabularize'}}

NeoBundleLazy 'Shougo/neocomplete.vim', {'autoload':{'insert':1}, 'vim_version':'7.4'}
    let g:neocomplete#enable_at_startup=1
    let g:neocomplete#data_directory=s:get_cache_dir('neocomplete')
    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

NeoBundle 'kien/ctrlp.vim', { 'depends': 'tacahiroy/ctrlp-funky' }
    let g:ctrlp_clear_cache_on_exit=1
    let g:ctrlp_max_height=40
    let g:ctrlp_show_hidden=0
    let g:ctrlp_follow_symlinks=1
    let g:ctrlp_max_files=20000
    let g:ctrlp_cache_dir=s:get_cache_dir('ctrlp')
    "let g:ctrlp_reuse_window='startify'
    let g:ctrlp_extensions=['funky']
    let g:ctrlp_custom_ignore = {
        \ 'dir': '\v[\/]\.(git|hg|svn|idea)$',
        \ 'file': '\v\.DS_Store$'
        \ }

    if executable('ag')
        let g:ctrlp_user_command='ag %s -l --nocolor -g ""'
    endif
" }}}

" keymaps {{{
nmap <silent> <leader>// \ci
vmap <silent> <leader>// \ci

" folding
nmap <leader><leader> za        " toggle fold open/close
nmap <leader>- zM               " close all folds
nmap <leader>= zR               " open all folds

" CtrlP
nmap , [ctrlp]
nnoremap [ctrlp] <nop>
nnoremap [ctrlp]t :CtrlPBufTag<cr>
nnoremap [ctrlp]T :CtrlPTag<cr>
nnoremap [ctrlp]l :CtrlPLine<cr>
nnoremap [ctrlp]o :CtrlPFunky<cr>
nnoremap [ctrlp]b :CtrlPBuffer<cr>

" Tablular
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

" NERDTree
nnoremap <leader>' :NERDTreeToggle<CR>
nnoremap <leader>; :NERDTreeFind<CR>
nnoremap <leader>w :FixWhitespace<CR>

" toggle whitespace identifiers
nmap <leader>l :set list!<CR>

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

nnoremap <silent> <leader>gv :Gitv<CR>
nnoremap <silent> <leader>gV :Gitv!<CR>
" }}}

NeoBundleCheck
